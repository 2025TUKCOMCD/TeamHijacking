name: Android CI

on:
  push:
    branches: [ "main", "watch" ]
  pull_request:
    branches: [ "main", "watch" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [ '17' ]
        # 디버그 및 릴리스 빌드를 위한 build-type 행렬 추가
        build-type: [ 'debug', 'release' ]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: JDK ${{ matrix.java-version }} 설정
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'
          cache: gradle

      - name: Gradle 종속성 캐시
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle', '**/settings.gradle', '**/gradle/libs.versions.toml', '**/gradle-wrapper.properties') }}
          restore-keys: |
             ${{ runner.os }}-gradle-

      - name: 루트 gradle.properties 파일 생성 및 구성
        run: |
          echo "android.useAndroidX=true" > gradle.properties
          echo "android.enableJetifier=true" >> gradle.properties
          echo "org.gradle.jvmargs=-Xmx6g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8" >> gradle.properties

      - name: 루트 gradle.properties를 front 모듈로 복사
        run: |
          if [ -d "./front" ]; then
            cp gradle.properties ./front/gradle.properties || true
          else
            echo "::warning::'front' 디렉토리를 찾을 수 없습니다. front 모듈로 gradle.properties 복사를 건너뜝니다."
          fi

      - name: front 모듈을 위한 local.properties 생성
        run: |
          mkdir -p ./front
          echo "ODsay_APIKEY=${{ secrets.ODsay_APIKEY }}" > ./front/local.properties
          echo "Geolocation_APIKEY=${{ secrets.Geolocation_APIKEY }}" >> ./front/local.properties
          echo "SMARTTHINGS_API_TOKEN=${{ secrets.SMARTTHINGS_API_TOKEN }}" >> ./front/local.properties
          echo "Public_Bus_APIKEY=${{ secrets.Public_Bus_APIKEY }}" >> ./front/local.properties
          echo "Public_Subway_APIKEY=${{ secrets.Public_Subway_APIKEY }}" >> ./front/local.properties
          echo "KAKAO_NATIVE_API_KEY=${{ secrets.KAKAO_NATIVE_API_KEY }}" >> ./front/local.properties
          echo "--- local.properties 생성 후 ./front/ 디렉토리 내용 ---"
          ls -al ./front/
          echo "----------------------------------------------------"

      - name: gradlew 실행 권한 부여
        working-directory: ./front
        run: chmod +x ./gradlew

      - name: 실행 중인 Gradle 데몬 중지
        working-directory: ./front
        run: ./gradlew --stop || true

      - name: Gradle 빌드 (${{ matrix.build-type }} 빌드)
        working-directory: ./front
        # build-type에 따라 assemble 태스크를 동적으로 설정
        run: ./gradlew :app:assemble${{ matrix.build-type }}

      - name: 유닛 테스트 실행 (${{ matrix.build-type }} 빌드)
        # 유닛 테스트는 일반적으로 디버그 빌드에서 실행됩니다.
        # 릴리스 빌드에서는 시간이 너무 오래 걸리거나 필요하지 않다면 건너뛸 수 있습니다.
        if: ${{ matrix.build-type == 'debug' }}
        working-directory: ./front
        run: ./gradlew :app:test${{ matrix.build-type }}UnitTest

      - name: 테스트 결과 업로드 (${{ matrix.build-type }} 빌드)
        uses: actions/upload-artifact@v4
        if: always() && ${{ matrix.build-type == 'debug' }}
        with:
          name: test-results-${{ matrix.build-type }}
          path: ./front/app/build/reports/tests/${{ matrix.build-type }}UnitTest

      - name: APK 업로드 (${{ matrix.build-type }} 빌드)
        uses: actions/upload-artifact@v4
        # 'main' 브랜치에 푸시되거나 pull request인 경우에만 업로드합니다.
        if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
        with:
          name: app-${{ matrix.build-type }}
          # build-type에 따라 경로를 동적으로 설정
          path: ./front/app/build/outputs/apk/${{ matrix.build-type }}/*.apk
