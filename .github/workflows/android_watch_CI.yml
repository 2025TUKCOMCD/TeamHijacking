name: Android CI

on:
  push:
    branches: [ "main", "watch" ]
  pull_request:
    branches: [ "main", "watch" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [ '17' ]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v4 # 최신 버전 v4 사용
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'
          cache: gradle

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          # 캐시 키는 그대로 유지: build.gradle, settings.gradle, libs.versions.toml, gradle-wrapper.properties 파일 변경 시 캐시 갱신
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle', '**/settings.gradle', '**/gradle/libs.versions.toml', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Create and configure root gradle.properties
        # 이 gradle.properties 파일은 프로젝트 루트에 생성됩니다.
        run: |
          echo "android.useAndroidX=true" > gradle.properties
          echo "android.enableJetifier=true" >> gradle.properties
          echo "org.gradle.jvmargs=-Xmx6g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8" >> gradle.properties
      
      - name: Copy root gradle.properties to front module
        # 생성된 gradle.properties를 'front' 디렉토리 내부로 복사
        run: |
          if [ -d "./front" ]; then
            cp gradle.properties ./front/gradle.properties || true
          else
            echo "::warning::'front' directory not found. Skipping gradle.properties copy to front module."
          fi
      - name: Create local.properties for front module (Corrected Path)
        run: |
          mkdir -p ./front
          echo "ODsay_APIKEY=${{ secrets.ODsay_APIKEY }}" > ./front/local.properties
          echo "Geolocation_APIKEY=${{ secrets.Geolocation_APIKEY }}" >> ./front/local.properties
          echo "SMARTTHINGS_API_TOKEN=${{ secrets.SMARTTHINGS_API_TOKEN }}" >> ./front/local.properties
          echo "Public_Bus_APIKEY=${{ secrets.Public_Bus_APIKEY }}" >> ./front/local.properties
          echo "Public_Subway_APIKEY=${{ secrets.Public_Subway_APIKEY }}" >> ./front/local.properties
          echo "KAKAO_NATIVE_API_KEY=${{ secrets.KAKAO_NATIVE_API_KEY }}" >> ./front/local.properties
          echo "--- Contents of ./front/ directory after local.properties creation ---"
          ls -al ./front/ # 이 줄을 추가하여 파일 생성 여부 확인
          echo "----------------------------------------------------"
      - name: Grant execute permission for gradlew
        # gradlew 파일이 './front'에 있으므로 working-directory를 './front'로 지정
        working-directory: ./front 
        run: chmod +x ./gradlew

      - name: Stop any running Gradle daemons
        # gradlew 파일이 './front'에 있으므로 working-directory를 './front'로 지정
        working-directory: ./front
        run: ./gradlew --stop || true

      - name: Build with Gradle
        # gradlew 파일이 './front'에 있으므로 working-directory를 './front'로 지정
        # 'front' 디렉토리 내에 'app' 모듈이 있다고 가정하고 빌드 명령 명시
        working-directory: ./front 
        run: ./gradlew :app:assembleDebug #--stacktrace --info  모듈 경로를 ':app'으로 지정

      - name: Run unit tests
        # gradlew 파일이 './front'에 있으므로 working-directory를 './front'로 지정
        # 'front' 디렉토리 내에 'app' 모듈이 있다고 가정하고 테스트 명령 명시
        working-directory: ./front 
        run: ./gradlew :app:testDebugUnitTest

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          # 경로는 'front' 디렉토리를 기준으로 지정
          path: ./front/app/build/reports/tests/testDebugUnitTest 

      - name: Upload APK (Debug)
        uses: actions/upload-artifact@v4
        if: github.ref == 'refs/heads/main'
        with:
          name: app-debug
          # 경로는 'front' 디렉토리를 기준으로 지정
          path: ./front/app/build/outputs/apk/debug/*.apk
